Description: >

    This template deploys a VPC, with a pair of public subnets spread
    across two Availability Zones. It deploys an Internet Gateway, with a default
    route on the public subnets.
    It then deploys a Postgres RDS instance, a public S3 bucket and a corresponding
    CloudFront distribution.
    Finally, it deploys an ECS cluster with an Application Load Balancer at the front
    and 2 ECR Docker registries to push your Laravel and Nginx images to.

    This template uses the public Docker image getlionel/nginx-to-https to handle
    redirection from HTTP to HTTPS within the cluster.

    Author: Lionel Martin <hi@getlionel.com>

Parameters:

    CertificateArn:
        Description: The AWS ARN of the SSL certificate to be used by the load-balancer
        Type: String

    CloudFrontOAI:
        Description: CloudFront Origin Access Identity
        Type: String

    CertificateArnCF:
        Description: AWS ARN of the us-east-1 SSL certificate to be used by CloudFront
        Type: String

    BaseUrl:
        Description: Second level domain name for your application (for example laravelaws.com)
        Type: String

    DBMasterPwd:
        Description: Postgresql master password
        Type: String

    MailDriver:
        Description: Mail driver (smtp or log)
        Type: String
        Default: log

    MailHost:
        Description: SMTP host
        Type: String
        Default: ""

    MailPort:
        Description: SMTP port
        Type: String
        Default: ""

    MailUsername:
        Description: SMTP password
        Type: String
        Default: ""

    MailPassword:
        Description: SMTP password
        Type: String
        Default: ""

Resources:

    VPC:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: https://s3.amazonaws.com/laravelaws/infrastructure/network.yaml
            Parameters:
                EnvironmentName:    !Ref AWS::StackName
                VpcCIDR:            10.180.0.0/16
                PublicSubnet1CIDR:  10.180.8.0/21
                PublicSubnet2CIDR:  10.180.16.0/21
                PrivateSubnet1CIDR: 10.180.24.0/21
                PrivateSubnet2CIDR: 10.180.32.0/21

    SecurityGroups:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: https://s3.amazonaws.com/laravelaws/infrastructure/security-groups.yaml
            Parameters:
                EnvironmentName: !Ref AWS::StackName
                VPC: !GetAtt VPC.Outputs.VPC

    Storage:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: https://s3.amazonaws.com/laravelaws/infrastructure/storage.yaml
            Parameters:
                DatabaseInstanceType: db.t2.small
                DatabasePassword: !Ref DBMasterPwd
                DatabaseUsername: laravel
                DatabaseSubnets: !GetAtt VPC.Outputs.PrivateSubnets
                DatabaseSecurityGroup: !GetAtt SecurityGroups.Outputs.DBSecurityGroup
                DatabaseName: !Ref AWS::StackName

    Web:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: https://s3.amazonaws.com/laravelaws/infrastructure/web.yaml
            Parameters:
                EnvironmentName: !Ref AWS::StackName
                VPC: !GetAtt VPC.Outputs.VPC
                PrivateSubnets: !GetAtt VPC.Outputs.PrivateSubnets
                PublicSubnets: !GetAtt VPC.Outputs.PublicSubnets
                LBCertificateArn: !Ref CertificateArn
                InstanceType: t2.micro
                ClusterSize: 2
                LBSecurityGroup: !GetAtt SecurityGroups.Outputs.LoadBalancerSecurityGroup
                ECSSecurityGroup: !GetAtt SecurityGroups.Outputs.ECSSecurityGroup
                S3BucketName: !GetAtt Storage.Outputs.S3BucketName

#    ALB:
#        Type: AWS::CloudFormation::Stack
#        Properties:
#            TemplateURL: https://s3.amazonaws.com/laravelaws/infrastructure/load-balancers.yaml
#            Parameters:
#                EnvironmentName: !Ref AWS::StackName
#                VPC: !GetAtt VPC.Outputs.VPC
#                Subnets: !GetAtt VPC.Outputs.PublicSubnets
#                SecurityGroup: !GetAtt SecurityGroups.Outputs.LoadBalancerSecurityGroup
#                CertificateArn: !Ref CertificateArn
#

#
##    CDN:
##        Type: AWS::CloudFormation::Stack
##        Properties:
##            TemplateURL: https://s3.amazonaws.com/laravelaws/infrastructure/cloudfront.yaml
##            Parameters:
##                S3BucketDNSName: !GetAtt Bucket.DomainName
##                CloudFrontOAI: !Ref CloudFrontOAI
##                CertificateArn: !Ref CertificateArnCF
##                CDNAlias: !Join [ ".", [ "files", !Ref BaseUrl ] ]
#
###    ElasticSearch:
###        Type: AWS::Elasticsearch::Domain
###        Properties:
###            DomainName: !Sub ${AWS::StackName}-es
###            ElasticsearchVersion: 5.5
###            ElasticsearchClusterConfig:
###                InstanceType: t2.small.elasticsearch
###                ZoneAwarenessEnabled: false
###                InstanceCount: 1
###            EBSOptions:
###                EBSEnabled: true
###                VolumeSize: 10
###            AccessPolicies:
###              Version: 2012-10-17
###              Statement:
###                - Effect: Allow
###                  Principal:
###                    AWS: "*"
###                  Action:
###                    - es:ESHttpDelete
###                    - es:ESHttpGet
###                    - es:ESHttpHead
###                    - es:ESHttpPost
###                    - es:ESHttpPut
###                  Resource: !Sub arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${AWS::StackName}-es/*
###                  Condition:
###                    IpAddress:
###                      aws:SourceIp:
###                        - !GetAtt VPC.Outputs.NatGateway1EIP
###                        - !GetAtt VPC.Outputs.NatGateway2EIP
##
#    ECS:
#        Type: AWS::CloudFormation::Stack
#        Properties:
#            TemplateURL: https://s3.amazonaws.com/laravelaws/infrastructure/ecs-cluster.yaml
#            Parameters:
#                EnvironmentName: !Ref AWS::StackName
#                InstanceType: t2.micro
#                ClusterSize: 2
#                VPC: !GetAtt VPC.Outputs.VPC
#                SecurityGroup: !GetAtt SecurityGroups.Outputs.ECSSecurityGroup
#                Subnets: !GetAtt VPC.Outputs.PublicSubnets
#                PublicSubnet: !GetAtt VPC.Outputs.PublicSubnet1
#                S3BucketName: !Ref Bucket

    Service:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: https://s3.amazonaws.com/laravelaws/services/website-service/service.yaml
            Parameters:
                VPC: !GetAtt VPC.Outputs.VPC
                Cluster: !GetAtt Web.Outputs.Cluster
                DesiredCount: 2
                ListenerHTTP: !GetAtt Web.Outputs.ListenerHTTP
                ListenerHTTPS: !GetAtt Web.Outputs.ListenerHTTPS
                Path: "*"
                ECR1: !GetAtt Web.Outputs.ECR1
                ECR2: !GetAtt Web.Outputs.ECR2
                APPURL: !Join [ "", [ "https://", !Ref BaseUrl ] ]
                DBCONNECTION: mysql
                DBHOST: !GetAtt Storage.Outputs.EndpointAddress
                DBPORT: !GetAtt Storage.Outputs.EndpointPort
                DBDATABASE: !Ref AWS::StackName
                DBUSERNAME: laravel
                DBPASSWORD: !Ref DBMasterPwd
                MAILDRIVER: !Ref MailDriver
                MAILHOST: !Ref MailHost
                MAILPORT: !Ref MailPort
                MAILUSERNAME: !Ref MailUsername
                MAILPASSWORD: !Ref MailPassword
                MAILFROMADDRESS: !Join [ "@", [ "admin", !Ref BaseUrl ] ]
                MAILFROMNAME: !Join [ " ", [ "Admin from", !Ref BaseUrl ] ]
                FILESYSTEMDRIVER: s3
                AWSBUCKET: !GetAtt Storage.Outputs.S3BucketName

Outputs:

#    BucketName:
#        Description: S3 Bucket Name with public read access
#        Value: !Ref Bucket
#
    DatabaseInstance:
        Description: Database instance
        Value: !Join [ ":", [ !GetAtt Storage.Outputs.EndpointAddress, !GetAtt Storage.Outputs.EndpointPort ] ]

    ECRNginx:
        Description: The ECR where to push your Nginx Docker image
        Value: !Join [ ".", [ !Ref "AWS::AccountId", "dkr.ecr", !Ref "AWS::Region", !Join [ "/", [ "amazonaws.com", !GetAtt Web.Outputs.ECR1 ] ] ] ]

    ECRLaravel:
        Description: The ECR where to push your Laravel Docker image
        Value: !Join [ ".", [ !Ref "AWS::AccountId", "dkr.ecr", !Ref "AWS::Region", !Join [ "/", [ "amazonaws.com", !GetAtt Web.Outputs.ECR2 ] ] ] ]

    ServiceUrl:
        Description: The URL endpoint for the website service
        Value: !Join ["", [ !GetAtt Web.Outputs.LoadBalancerUrl, "/" ]]

#    CloudFrontDistribution:
#        Description: Domain name for the CloudFront distribution
#        Value: !GetAtt CDN.Outputs.CFDistributionDomainName
